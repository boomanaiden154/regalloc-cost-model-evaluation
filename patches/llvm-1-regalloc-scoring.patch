diff --git a/llvm/lib/CodeGen/RegAllocEvictionAdvisor.cpp b/llvm/lib/CodeGen/RegAllocEvictionAdvisor.cpp
index daba130bf158..aa204c27f98d 100644
--- a/llvm/lib/CodeGen/RegAllocEvictionAdvisor.cpp
+++ b/llvm/lib/CodeGen/RegAllocEvictionAdvisor.cpp
@@ -23,6 +23,9 @@
 #include "llvm/Support/ErrorHandling.h"
 #include "llvm/Target/TargetMachine.h"
 
+#include <cstdlib>
+#include <chrono>
+
 using namespace llvm;
 
 static cl::opt<RegAllocEvictionAdvisorAnalysis::AdvisorMode> Mode(
@@ -43,6 +46,10 @@ static cl::opt<bool> EnableLocalReassignment(
              "may be compile time intensive"),
     cl::init(false));
 
+static cl::opt<bool> RandomizeEvictionDecisions(
+    "regalloc-randomize-evictions", cl::Hidden,
+    cl::desc("Whether or not to randomize eviction decisions"));
+
 namespace llvm {
 cl::opt<unsigned> EvictInterferenceCutoff(
     "regalloc-eviction-max-interference-cutoff", cl::Hidden,
@@ -130,7 +137,12 @@ RegAllocEvictionAdvisor::RegAllocEvictionAdvisor(const MachineFunction &MF,
       RegClassInfo(RA.getRegClassInfo()), RegCosts(TRI->getRegisterCosts(MF)),
       EnableLocalReassign(EnableLocalReassignment ||
                           MF.getSubtarget().enableRALocalReassignment(
-                              MF.getTarget().getOptLevel())) {}
+                              MF.getTarget().getOptLevel())) {
+  int seed = std::chrono::duration_cast<std::chrono::milliseconds>(
+                 std::chrono::system_clock::now().time_since_epoch())
+                 .count();
+  srand(seed);
+}
 
 /// shouldEvict - determine if A should evict the assigned live range B. The
 /// eviction policy defined by this function together with the allocation order
@@ -291,10 +303,21 @@ MCRegister DefaultEvictionAdvisor::tryFindEvictionCandidate(
     BestCost.MaxWeight = VirtReg.weight();
   }
 
+  std::vector<int> EvictionPositions;
+  size_t index1 = 0;
+
   for (auto I = Order.begin(), E = Order.getOrderLimitEnd(OrderLimit); I != E;
        ++I) {
     MCRegister PhysReg = *I;
     assert(PhysReg);
+
+    if(RandomizeEvictionDecisions && canAllocatePhysReg(CostPerUseLimit, PhysReg) &&
+       canEvictHintInterference(VirtReg, PhysReg, FixedRegisters)) {
+      EvictionPositions.push_back(index1);
+    }
+
+    ++index1;
+
     if (!canAllocatePhysReg(CostPerUseLimit, PhysReg) ||
         !canEvictInterferenceBasedOnCost(VirtReg, PhysReg, false, BestCost,
                                          FixedRegisters))
@@ -307,5 +330,18 @@ MCRegister DefaultEvictionAdvisor::tryFindEvictionCandidate(
     if (I.isHint())
       break;
   }
+
+  if(RandomizeEvictionDecisions && !EvictionPositions.empty()) {
+    size_t CandidatePosition = EvictionPositions[rand() % EvictionPositions.size()];
+    size_t index2 = 0;
+    for (auto I = Order.begin(), E = Order.getOrderLimitEnd(OrderLimit); I != E;
+       ++I) {
+      if(index2 == CandidatePosition) {
+        BestPhys = *I;
+        break;
+      }
+      ++index2;
+    }
+  }
   return BestPhys;
 }
diff --git a/llvm/lib/CodeGen/RegAllocScore.cpp b/llvm/lib/CodeGen/RegAllocScore.cpp
index e420283dfcfa..960f4ab854d8 100644
--- a/llvm/lib/CodeGen/RegAllocScore.cpp
+++ b/llvm/lib/CodeGen/RegAllocScore.cpp
@@ -24,6 +24,7 @@
 #include "llvm/CodeGen/TargetSubtargetInfo.h"
 #include "llvm/MC/MCInstrDesc.h"
 #include "llvm/Support/CommandLine.h"
+#include "llvm/Support/Debug.h"
 
 using namespace llvm;
 cl::opt<double> CopyWeight("regalloc-copy-weight", cl::init(0.2), cl::Hidden);
@@ -78,6 +79,9 @@ llvm::calculateRegAllocScore(const MachineFunction &MF,
       [&](const MachineBasicBlock &MBB) {
         return MBFI.getBlockFreqRelativeToEntryBlock(&MBB);
       },
+      [&]() {
+        return MBFI.getEntryFreq();
+      },
       [&](const MachineInstr &MI) {
         return MF.getSubtarget().getInstrInfo()->isTriviallyReMaterializable(
             MI);
@@ -87,6 +91,7 @@ llvm::calculateRegAllocScore(const MachineFunction &MF,
 RegAllocScore llvm::calculateRegAllocScore(
     const MachineFunction &MF,
     llvm::function_ref<double(const MachineBasicBlock &)> GetBBFreq,
+    llvm::function_ref<uint64_t()> GetEntryCount,
     llvm::function_ref<bool(const MachineInstr &)>
         IsTriviallyRematerializable) {
   RegAllocScore Total;
@@ -117,5 +122,13 @@ RegAllocScore llvm::calculateRegAllocScore(
     }
     Total += MBBScore;
   }
+  DEBUG_WITH_TYPE("regallocscore", dbgs()
+                                                << Total.copyCounts() << ","
+                                                << Total.loadCounts() << ","
+                                                << Total.storeCounts() << ","
+                                                << Total.loadStoreCounts() << ","
+                                                << Total.expensiveRematCounts() << ","
+                                                << Total.cheapRematCounts() << ","
+						<< MF.getName() << "\n");
   return Total;
 }
diff --git a/llvm/lib/CodeGen/RegAllocScore.h b/llvm/lib/CodeGen/RegAllocScore.h
index b80adae29f23..b6eb555aa177 100644
--- a/llvm/lib/CodeGen/RegAllocScore.h
+++ b/llvm/lib/CodeGen/RegAllocScore.h
@@ -67,6 +67,7 @@ RegAllocScore calculateRegAllocScore(const MachineFunction &MF,
 RegAllocScore calculateRegAllocScore(
     const MachineFunction &MF,
     llvm::function_ref<double(const MachineBasicBlock &)> GetBBFreq,
+    llvm::function_ref<uint64_t()> GetEntryCount,
     llvm::function_ref<bool(const MachineInstr &)> IsTriviallyRematerializable);
 } // end namespace llvm
 
